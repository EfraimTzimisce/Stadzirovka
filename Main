#include <iostream>
#include <vector>
#include <chrono>
#include <cmath>
// Function to check if a number is prime
bool isPrime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i <= sqrt(n); ++i) {
        if (n % i == 0) return false;
    }
    return true;
}
// Function for finding primes using Trial Division
void findPrimesByTrialDivision(int start, int end) {
    auto start_time = std::chrono::steady_clock::now();
    std::vector<int> primes;
    for (int i = start; i <= end; ++i) {
        if (isPrime(i)) {
            primes.push_back(i);
        }
    }
    auto end_time = std::chrono::steady_clock::now();
    std::cout << "Trial Division: Found " << primes.size() << " prime numbers in "
              << std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count()
              << " milliseconds" << std::endl;
    std::cout << "Primes: ";
    for (int prime : primes) {
        std::cout << prime << " ";
    }
    std::cout << std::endl;
}
// Function for finding primes using Fermat's Little Theorem (not implemented)
// Function for finding primes using Sieve of Eratosthenes
void findPrimesBySieveOfEratosthenes(int start, int end) {
    auto start_time = std::chrono::steady_clock::now();
    std::vector<bool> isPrime(end + 1, true);
    isPrime[0] = isPrime[1] = false;
    for (int p = 2; p * p <= end; ++p) {
        if (isPrime[p]) {
            for (int i = p * p; i <= end; i += p) {
                isPrime[i] = false;
            }
        }
    }
    std::vector<int> primes;
    for (int i = start; i <= end; ++i) {
        if (isPrime[i]) {
            primes.push_back(i);
        }
    }
    auto end_time = std::chrono::steady_clock::now();
    std::cout << "Sieve of Eratosthenes: Found " << primes.size() << " prime numbers in "
              << std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count()
              << " milliseconds" << std::endl;
    std::cout << "Primes: ";
    for (int prime : primes) {
        std::cout << prime << " ";
    }
    std::cout << std::endl;
}
int main(int argc, char *argv[]) {
    if (argc != 4) {
        std::cerr << "Usage: " << argv[0] << " <start_number> <end_number> <f|s|e>" << std::endl;
        return 1;
    }
    int start = std::stoi(argv[1]);
    int end = std::stoi(argv[2]);
    char option = argv[3][0];
    if (option == 's') {
        findPrimesByTrialDivision(start, end);
    } else if (option == 'f') {
        // findPrimesByFermatMethod(start, end); // Not implemented
    } else if (option == 'e') {
        findPrimesBySieveOfEratosthenes(start, end);
    } else {
        std::cerr << "Invalid option. Available options: s (Trial Division), f (Fermat Method), e (Sieve of Eratosthenes)" << std::endl;
        return 1;
    }
    return 0;
}
