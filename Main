#include <iostream>
#include <vector>
#include <chrono>
#include <cmath>

// Функция для поиска простых чисел методом деления
void findPrimesByTrialDivision(int start, int end) {
    
    int count = 0;
    auto start_time = std::chrono::steady_clock::now();
    for (int i = start; i <= end; ++i) {
        if (isPrime(i)) {
            // std::cout << i << " ";
            count++;
        }
    }
    auto end_time = std::chrono::steady_clock::now();
    std::cout << "Perebor: Found " << count << " prime numbers in "
              << std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count()
              << " milliseconds" << std::endl;
}

// Функция для поиска простых чисел методом Алгоритм Ферма
void findPrimesByFermatMethod(int start, int end) {
    auto start_time = std::chrono::steady_clock::now();

    std::vector<int> primes;
    for (int i = start; i <= end; ++i) {
        bool isPrime = true;
        if (i <= 1) {
            isPrime = false;
        } else {
            for (int j = 2; j <= sqrt(i); ++j) {
                if (i % j == 0) {
                    isPrime = false;
                    break;
                }
            }
        }
        if (isPrime) {
            primes.push_back(i);
        }
    }

    auto end_time = std::chrono::steady_clock::now();
    std::cout << "Fermat's Method: Found " << primes.size() << " prime numbers in "
              << std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count()
              << " milliseconds" << std::endl;
}

// Функция для поиска простых чисел методом Решето Эратосфена
void findPrimesBySieveOfEratosthenes(int start, int end) {
    auto start_time = std::chrono::steady_clock::now();

    std::vector<bool> isPrime(end + 1, true);
    isPrime[0] = isPrime[1] = false;
    for (int p = 2; p * p <= end; ++p) {
        if (isPrime[p]) {
            for (int i = p * p; i <= end; i += p) {
                isPrime[i] = false;
            }
        }
    }

    int count = 0;
    for (int i = start; i <= end; ++i) {
        if (isPrime[i]) {
            // std::cout << i << " ";
            count++;
        }
    }

    auto end_time = std::chrono::steady_clock::now();
    std::cout << "Sieve of Eratosthenes: Found " << count << " prime numbers in "
              << std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count()
              << " milliseconds" << std::endl;
}

int main(int argc, char *argv[]) {
    if (argc != 4) {
        std::cerr << "Usage: " << argv[0] << " <option> <start_number> <end_number>" << std::endl;
        return 1;
    }

    char option = argv[1][0];
    int start = std::stoi(argv[2]);
    int end = std::stoi(argv[3]);

    if (option == 's') {
        findPrimesByTrialDivision(start, end);
    } else if (option == 'f') {
        findPrimesByFermatMethod(start, end);
    } else if (option == 'e') {
        findPrimesBySieveOfEratosthenes(start, end);
    } else {
        std::cerr << "Invalid option. Available options: s (Trial Division), f (Fermat Method), e (Sieve of Eratosthenes)" << std::endl;
        return 1;
    }

    return 0;
}
