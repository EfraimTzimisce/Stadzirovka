#include <iostream>
#include <vector>
#include <chrono>

using namespace std;
using namespace std::chrono;

// Добавил больше комментариев, чтобы проше было определить, какая часть кода за что отвечает.

/*

 Команда для сборки программы
g++ -o Stadzirovka stadzirovka.cpp -std=c++11

Команда для вызова программы 
./Stadzirovka 1 1000 (подставить желаемые параметры)

Test 1 (числа от 50 до 100) -  000:00.016
Test 2 (числа от 9 до 190) - 000:00.031
Test 3 (числа от 1 до 500) - 000:00.016

Дополнительные тесты
Test 4 (числа от 1 до 1000) - 000:00.078
Test 5 (числа от 1 до 622337203) - 000:00.031

*/

// Определяем, простое ли число
bool isPrime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

// Ищем простые числа в заданном диапазоне
vector<int> findPrimes(int start, int end) {
    vector<int> primes;
    for (int num = start; num <= end; num++) {
        if (isPrime(num)) {
            primes.push_back(num);
        }
    }
    return primes;
}

int main(int argc, char *argv[]) {
    if (argc < 2 || argc > 3) {
        cout << "Usage: " << argv[0] << " <start> <end>" << endl;
        cout << "Or: " << argv[0] << " <end>" << endl;
        return 1;
    }

    int start = 1;
    int end = 0;

    if (argc == 2) {
        end = atoi(argv[1]);
    } else {
        start = atoi(argv[1]);
        end = atoi(argv[2]);
    }

    // Засекаем время
    auto start_time = high_resolution_clock::now();

    // Поиск простых чисел в заданном диапазоне
    vector<int> primes = findPrimes(start, end);

    auto end_time = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(end_time - start_time);

    cout << "Prime numbers in range [" << start << ", " << end << "]:" << endl;

    // Показываем, что нашли (по требованию)
    /*
    for (int prime : primes) {
        cout << prime << " ";
    }
    cout << endl;
    */

    cout << "Execution time: " << duration.count() << " milliseconds" << endl;

    return 0;
}
