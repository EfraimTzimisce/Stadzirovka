#include <iostream>
#include <vector>
#include <thread>
#include <cmath>

bool is_prime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i <= sqrt(num); ++i) {
        if (num % i == 0) return false;
    }
    return true;
}

void find_primes(int start, int end, std::vector<int>& primes) {
    for (int i = start; i <= end; ++i) {
        if (is_prime(i)) {
            primes.push_back(i);
        }
    }
}

int main() {
    int option;
    std::cout << "Choose 1 - to check from 1 to selected number or 2 - between selected numbers\n";
    std::cin >> option;

    int lower_bound = 1, upper_bound;

    if (option == 1) {
        std::cout << "Enter number: ";
        std::cin >> upper_bound;
    } else if (option == 2) {
        std::cout << "End and start of the range: ";
        std::cin >> lower_bound >> upper_bound;
    }

    if (upper_bound < lower_bound) {
        std::swap(lower_bound, upper_bound);
    }

    int num_threads = std::thread::hardware_concurrency();
    std::vector<std::thread> threads;
    std::vector<std::vector<int>> results(num_threads);

    for (int i = 0; i < num_threads; ++i) {
        int start = lower_bound + i * (upper_bound - lower_bound + 1) / num_threads;
        int end = lower_bound + (i + 1) * (upper_bound - lower_bound + 1) / num_threads - 1;
        threads.emplace_back(find_primes, start, end, std::ref(results[i]));
    }

    for (auto& thread : threads) {
        thread.join();
    }

    std::vector<int> all_primes;
    for (const auto& result : results) {
        all_primes.insert(all_primes.end(), result.begin(), result.end());
    }

    for (int prime : all_primes) {
        std::cout << prime << " ";
    }
    std::cout << std::endl;

    return 0;
}
