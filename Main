#include <iostream>
#include <vector>
#include <cmath>
#include <thread>

// Интерфейс на английском, иначе компилятор просто не понимает русских букв.

// Проверяем, является ли число простым или нет
bool isPrime(int num) {
    if (num <= 1) {
        return false;
    }
    for (int i = 2; i <= sqrt(num); ++i) {
        if (num % i == 0) {
            return false;
        }
    }
    return true;
}

// Создаем список найденных простых чисел
void findPrimesInRange(int start, int end) {
    for (int i = start; i <= end; ++i) {
        if (isPrime(i)) {
            std::cout << i << " ";
        }
    }
}

// Определяем от какого до какого числа проверять
int main() {
    int start = 1;
    int end = 0;
    int choice;

    std::cout << "Please choose an option:" << std::endl;
    std::cout << "Press 1, so I will find numbers from 1(one) to the selected number" << std::endl;
    std::cout << "Press 2, so I will find numbers between first and last numbers" << std::endl;
    std::cin >> choice;

    if (choice == 1) {
        std::cout << "Please tell me how many threads you wish to split the pool: ";
        std::cin >> end;
    } else if (choice == 2) {
        std::cout << "Please enter first and last number of the range: ";
        std::cin >> start >> end;
    } else {
        std::cout << "Sorry, your choice is not valid, please enter 1 or 2 when you launch programm next time" << std::endl;
        return 1;
    }

    int numToCheck;
    std::cout << "Please tell me how many threads you wish to split the pool: ";
    std::cin >> numToCheck;

    int rangeSize = (end - start + 1) / numToCheck;

    std::vector<std::thread> threads;

    for (int i = 0; i < numToCheck; ++i) {
        int rangeStart = start + i * rangeSize;
        int rangeEnd = (i == numToCheck - 1) ? end : rangeStart + rangeSize - 1;
        threads.emplace_back(findPrimesInRange, rangeStart, rangeEnd);
    }

    for (auto& thread : threads) {
        thread.join();
    }

    return 0;
}
