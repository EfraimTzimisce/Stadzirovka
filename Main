#include <iostream>
#include <vector>
#include <thread>

bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i * i <= num; ++i) {
        if (num % i == 0) return false;
    }
    return true;
}

void findPrimesInRange(int start, int end) {
    for (int num = start; num <= end; ++num) {
        if (isPrime(num)) {
            std::cout << num << " ";
        }
    }
}

int main(int argc, char* argv[]) {
    if (argc < 2 || argc > 3) {
        std::cout << "Usage: " << argv[0] << " <start> [<end>]\n";
        return 1;
    }

    int start = std::stoi(argv[1]);
    int end = (argc == 3) ? std::stoi(argv[2]) : start;

    int numThreads = std::thread::hardware_concurrency();
    int rangeSize = (end - start + 1) / numThreads;

    std::vector<std::thread> threads;
    for (int i = 0; i < numThreads; ++i) {
        int threadStart = start + i * rangeSize;
        int threadEnd = (i == numThreads - 1) ? end : threadStart + rangeSize - 1;
        threads.emplace_back(findPrimesInRange, threadStart, threadEnd);
    }

    for (auto& thread : threads) {
        thread.join();
    }

    return 0;
}
